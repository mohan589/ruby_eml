c
email.nil? ? ', ' : ''
email.blank? ? ', ' : ''
email
email.empty? ? ', ' : ''
email.length > 0 ? ', ' : ''
email.length
email.length ? ', ' : ''
email
c
data
c
data
n
email
n
email
n
email
n
email
(email.length ? ' ' : '') + '<' + data.dig(:email) + '>'
data.dig(:email)
email.length
data.dig(:name)
n
data.instance_of?(String)
data
c
email
emal
c
email
c
email
c
email
c
email
n
email
n
c
email
n
ele.dig(:email)
email
n
ele.dig(:name)
if ele.dig(:name)
n
email
ele.dig(:email)
email
n
ele.dig(:email)
email
n
email
n
ele.dig(:email)
email.length
ele.dig(:name)
ele
c
email
c
data
c
email
n
email
n
data
c
data.instance_of?(Array)
data
c
data.dig(:key)
key
c
data[:to]
data[:from]
data.keys
data.dig(:key)
data
key
c
email
c
data
c
email
c
data
c
a
n
a
str
str[ind..str.length]
n
ind
str
st
c
a
n
i
s
c
content
wrap(content, 76)
n
c
e
n
eml
n
c
e
n
eml
content
n
c
attachment.dig(:data).instance_of? String
attachment.dig(:data)
n
eml
n
c
'Content-Disposition: ' + (attachment.dig(:inline) ? 'inline' : 'attachment')
eml += 'Content-Disposition: ' + (attachment.dig(:inline) ? 'inline' : 'attachment') + '; filename="' + (attachment.dig(:filename) || attachment.dig(:name) || ('attachment_' + (i + 1))) + '"' + eol
attachment.dig(:inline)
attachment&.inline
attachment
n
eml
n
c
e
n
boundary
data.dig(:attachments).size
data.dig(:attachments)
datadata.dig(:attachments)
data
exit
c
eml
c
eml
c
eml
c
eml
c
eml
c
keys
c
keys
c
res = data[:headers].keys << data.keys
res.flatten.uniq
res.uniq
res.flatten
res = data[:headers].keys << data.keys
data.keys
data[:headers].keys
res = data[:headers].keys.merge(data.keys)
data[:headers].keys
data.keys
data
key
data.dig(:headers)
key
value
value.instance_of?(String)
key
c
key
c
key
c
value
key
c
value
key
c
key
c
value
n
key
n
key
c
key
c
key
c
value
key
c
key
c
value
c
data.dig(:headers)
data.keys
data
n
data
c
eml
c
data
eml
c
eml
c
eml
c
eml
c
eml
c
eml
c
eml
c
eml
c
value.to_s.gsub(/\r?\n/, eol)
value.to_s.scan(/\r?\n/)
value.to_s
value
value.scan(/\r?\n/)
eml
value
tt = value.gsub(/\r?\n/, eol + '  ')
tt
tt = value.gsub(/\r?\n/, eol + '  ')
value.gsub(/\r?\n/, eol + '  ')
value = data.dig(:headers)
value
value.gsub(/\r?\n/, eol + '  ')
key
data.dig(:headers)
data.dig(:headers, key)
key
c
key
